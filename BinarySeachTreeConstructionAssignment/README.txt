BinarySearchTreeConstructionAssignment.cpp

	This program creates 2 Binary Seach Trees, the first being a tree constructed from only an array holding the PreOrder traversal of a tree. The second is a tree constructed from two arrays, PreOrder traversal and InOrder traversal.
	The program uses a class of name 'Node' that declares that each node contains a value/data, a pointer to the left child, and a pointer to the right child. Following this, a node is created by using a reference to the class that sets a created node's left and right children to NULL and gives the data portion an empty value. 
	The first tree only constructed from an array holding the PreOrder traversal uses two functions, one called 'constructTreeHelp' is a helper function that makes the first index of the PreOrder array the root of the tree, and splits the remaining values into a left or right subtree by using the recursive call that creates the left subtree using values smaller than the root, and a right subtree using values larger than the root. The second function 'constructTreePre' simply finds the minimum and maximum of the PreOrder array and calls the helper function that creates the full tree.
	The second tree constructed from both PreOrder and InOrder traversal arrays follows the same process in using a helper function and a separate function to create the fill tree, but the process is a bit different. The helper function for the second tree is called 'constructTreeBoth' and it sets the root value to the first index of the PreOrder array and uses a search function implemented to search through the InOrder array to find what index in the InOrder array is the root found in the PreOrder array. The tree left subtree is then constructed using the values on the left of the index of the searched root in the InOrder array and the right of the index for the right subtree. As you can see, this is done recursively. The constructor of the full second tree is called 'constructTreeBoth2' and it simply combines the subtrees.
	In main, the two arrays are listed, as well as their individually calculated sizes respectively. Two roots are created for two separate trees using the two constructor functions, and then finally the outputted PostOrder Traversal of each tree is equal to each other. The program requires nothing more than to be run, numbers can be altered within the program and not in the terminal. 

